#include <Wire.h>
#include <Adafruit_BMP085.h>
#include <SPI.h>
#include <RF24.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <avr/wdt.h>

#define CE_PIN 8
#define CSN_PIN 10

int retryCount=0;

unsigned long lastTransmissionTime = 0;

const byte address[6] = "00001";

Adafruit_BMP085 bmp;

RF24 radio(CE_PIN, CSN_PIN);

// GPS object and pins
const int GPSBaud = 9600;
const int GPS_RX_PIN = 3;
TinyGPSPlus gps;
SoftwareSerial gpsSerial(GPS_RX_PIN, -1);  // RX pin, TX pin not used

//Data variables
String bmpData;
String date;
String gpsLat;
String gpsLong;
String altitude;
String speed;
String time;

void setup() {

  String errorPacket;
  Serial.begin(9600);
  gpsSerial.begin(9600);
  radio.begin();
  radio.setChannel(6);
  radio.setPALevel(RF24_PA_MIN);
  radio.openWritingPipe(address);
  radio.setAutoAck(true);
  radio.stopListening();
  delay(1000);


  //If a sensor is not connected do not proceed to the main program
  while (gpsSerial.available() == 0 || !bmp.begin()) {

    
      errorPacket = "Hardware issue";
      Serial.println(errorPacket);
      sendData('G', errorPacket);
      delay(2000);

  }

  Serial.println("Sensors are connected. Data collection and transmission will soon begin.");
  delay(5000);
}

void loop() {

  retryCount=0;
  if (radio.isChipConnected()) {
    if (gpsSerial.available() > 0) {
      char gpsInfo = gpsSerial.read();
      if (gps.encode(gpsInfo) && millis() - lastTransmissionTime >= 10000) {

        lastTransmissionTime = millis();
        prepareDate();
        sendData('D', date);
        prepareTime();
        sendData('T', time);
        preparebmpData();
        sendData('P', bmpData);
        prepareGpsLat();
        sendData('L', gpsLat);
        prepareGpsLong();
        sendData('G', gpsLong);
        prepareAltitude();
        sendData('A',altitude);
        prepareSpeed();
        sendData('S',speed);
      }
    }
  } else {
    Serial.println("NRF24 module is not connected. Board restarting.");
    delay(1000);
    wdt_disable();          // Disable the watchdog timer to prevent automatic reset
    wdt_enable(WDTO_15MS);  // Enable the watchdog timer with a short timeout
    while (true) {}         // Wait for the watchdog timer to trigger a reset
  }
}

void preparebmpData() {
  float temperature = bmp.readTemperature();
  float pressure = (bmp.readPressure() / 100);
  bmpData = String(temperature) + " " + String(pressure);
}

void prepareDate() {

  String date2 = "";
  if (gps.date.isValid() && gps.time.isValid()) {
    int day = gps.date.day();
    int month = gps.date.month();
    int year = gps.date.year();


    if (day < 10) {
      date2 = date2 + "0" + String(day) + "/";
    } else date2 += String(day) + "/";


    if (month < 10) {
      date2 = date2 + "0" + String(month) + "/";
    } else date2 += String(month) + "/";


    date2 += String(year);
    
  } else {
    date2 = "01/01/2000";
  }
  date = date2;
}


void prepareTime() {

String time2="";
if (gps.time.isValid()){

    int hour = gps.time.hour() +3;
    int minute = gps.time.minute();
    int second = gps.time.second();
   

if (hour > 23) {
      hour = hour - 24;
    }

    if (hour < 10) {
      time2 += "0" + String(hour) + ":";
    }

    else {
      time2 += String(hour) + ":";
    }


    if (minute < 10) {
      time2 = time2 + "0" + String(minute) + ":";
    } else {
      time2 += String(minute) + ":";
    }


    if (second <= 9) {
      time2 += "0" + String(second);
    }

    else {
      time2 += String(second);
    }

}
else
time2 = "00:00:00";

time = time2;

}

void prepareGpsLat() {

  if (gps.location.isValid()) {
    gpsLat = String(gps.location.lat(), 6);
  } else {
    gpsLat = "34.791294";
  }
}

void prepareGpsLong() {

  if (gps.location.isValid()) {
    gpsLong = String(gps.location.lng(), 6);
  } else {
    gpsLong = "32.426048";
  }
}


void prepareAltitude(){
   altitude = String(gps.altitude.meters());
}

void prepareSpeed(){
  speed = String(gps.speed.kmph());
}


void sendData(char header, const String& data) {
  String packet = String(header) + data;

  if (radio.write(packet.c_str(), packet.length() + 1)) {
    Serial.println(data + " sent.");
  } 
    else{

      Serial.println(data + " failed.");
      retryCount++;

      if(retryCount>5)
      {
      Serial.println("Messaged are not being sent. Restarting...");
      delay(1000);
      wdt_disable();          // Disable the watchdog timer to prevent automatic reset
      wdt_enable(WDTO_15MS);  // Enable the watchdog timer with a short timeout
      while (true) {} 
      }
    
    delay(1000);
    sendData(header,data);

    }
}
